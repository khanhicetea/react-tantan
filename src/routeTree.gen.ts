/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as authenticatedRouteRouteImport } from './routes/(authenticated)/route'
import { Route as authPagesRouteRouteImport } from './routes/(auth-pages)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiHealthRouteImport } from './routes/api/health'
import { Route as authPagesSignupRouteImport } from './routes/(auth-pages)/signup'
import { Route as authPagesLoginRouteImport } from './routes/(auth-pages)/login'
import { Route as authenticatedDashboardRouteRouteImport } from './routes/(authenticated)/dashboard/route'
import { Route as authenticatedDashboardIndexRouteImport } from './routes/(authenticated)/dashboard/index'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'

const authenticatedRouteRoute = authenticatedRouteRouteImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRouteImport,
} as any)
const authPagesRouteRoute = authPagesRouteRouteImport.update({
  id: '/(auth-pages)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiHealthRoute = ApiHealthRouteImport.update({
  id: '/api/health',
  path: '/api/health',
  getParentRoute: () => rootRouteImport,
} as any)
const authPagesSignupRoute = authPagesSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authPagesRouteRoute,
} as any)
const authPagesLoginRoute = authPagesLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authPagesRouteRoute,
} as any)
const authenticatedDashboardRouteRoute =
  authenticatedDashboardRouteRouteImport.update({
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => authenticatedRouteRoute,
  } as any)
const authenticatedDashboardIndexRoute =
  authenticatedDashboardIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => authenticatedDashboardRouteRoute,
  } as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authenticatedRouteRouteWithChildren
  '/dashboard': typeof authenticatedDashboardRouteRouteWithChildren
  '/login': typeof authPagesLoginRoute
  '/signup': typeof authPagesSignupRoute
  '/api/health': typeof ApiHealthRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/dashboard/': typeof authenticatedDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof authenticatedRouteRouteWithChildren
  '/login': typeof authPagesLoginRoute
  '/signup': typeof authPagesSignupRoute
  '/api/health': typeof ApiHealthRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/dashboard': typeof authenticatedDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth-pages)': typeof authPagesRouteRouteWithChildren
  '/(authenticated)': typeof authenticatedRouteRouteWithChildren
  '/(authenticated)/dashboard': typeof authenticatedDashboardRouteRouteWithChildren
  '/(auth-pages)/login': typeof authPagesLoginRoute
  '/(auth-pages)/signup': typeof authPagesSignupRoute
  '/api/health': typeof ApiHealthRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/(authenticated)/dashboard/': typeof authenticatedDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/signup'
    | '/api/health'
    | '/api/auth/$'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/signup' | '/api/health' | '/api/auth/$' | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/(auth-pages)'
    | '/(authenticated)'
    | '/(authenticated)/dashboard'
    | '/(auth-pages)/login'
    | '/(auth-pages)/signup'
    | '/api/health'
    | '/api/auth/$'
    | '/(authenticated)/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authPagesRouteRoute: typeof authPagesRouteRouteWithChildren
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren
  ApiHealthRoute: typeof ApiHealthRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth-pages)': {
      id: '/(auth-pages)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authPagesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/health': {
      id: '/api/health'
      path: '/api/health'
      fullPath: '/api/health'
      preLoaderRoute: typeof ApiHealthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth-pages)/signup': {
      id: '/(auth-pages)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authPagesSignupRouteImport
      parentRoute: typeof authPagesRouteRoute
    }
    '/(auth-pages)/login': {
      id: '/(auth-pages)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authPagesLoginRouteImport
      parentRoute: typeof authPagesRouteRoute
    }
    '/(authenticated)/dashboard': {
      id: '/(authenticated)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof authenticatedDashboardRouteRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/dashboard/': {
      id: '/(authenticated)/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof authenticatedDashboardIndexRouteImport
      parentRoute: typeof authenticatedDashboardRouteRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface authPagesRouteRouteChildren {
  authPagesLoginRoute: typeof authPagesLoginRoute
  authPagesSignupRoute: typeof authPagesSignupRoute
}

const authPagesRouteRouteChildren: authPagesRouteRouteChildren = {
  authPagesLoginRoute: authPagesLoginRoute,
  authPagesSignupRoute: authPagesSignupRoute,
}

const authPagesRouteRouteWithChildren = authPagesRouteRoute._addFileChildren(
  authPagesRouteRouteChildren,
)

interface authenticatedDashboardRouteRouteChildren {
  authenticatedDashboardIndexRoute: typeof authenticatedDashboardIndexRoute
}

const authenticatedDashboardRouteRouteChildren: authenticatedDashboardRouteRouteChildren =
  {
    authenticatedDashboardIndexRoute: authenticatedDashboardIndexRoute,
  }

const authenticatedDashboardRouteRouteWithChildren =
  authenticatedDashboardRouteRoute._addFileChildren(
    authenticatedDashboardRouteRouteChildren,
  )

interface authenticatedRouteRouteChildren {
  authenticatedDashboardRouteRoute: typeof authenticatedDashboardRouteRouteWithChildren
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedDashboardRouteRoute:
    authenticatedDashboardRouteRouteWithChildren,
}

const authenticatedRouteRouteWithChildren =
  authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authPagesRouteRoute: authPagesRouteRouteWithChildren,
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
  ApiHealthRoute: ApiHealthRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
